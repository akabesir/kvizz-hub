{
    "sourceFile": "src/components/QuizForm/QuizAnswer.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1684325767899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1684325774636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -255,13 +255,9 @@\n                       index={index}\r\n                       questions={questions}\r\n                       setQuestions={setQuestions}\r\n                       questionType={question.questionType}\r\n-                      onChange={(e) => {\r\n-                        const newAnswers = [...answers];\r\n-                        newAnswers[index] = e.target.value;\r\n-                        setAnswers(newAnswers);\r\n-                      }}\r\n+                   \r\n                     />\r\n                   )}\r\n \r\n                   <hr style={{ width: \"100%\", marginBottom: \"16px\" }} />\r\n"
                }
            ],
            "date": 1684325767899,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport ShareIcon from \"@mui/icons-material/Share\";\r\nimport FileCopyIcon from \"@mui/icons-material/FileCopy\";\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nimport Box from \"@mui/material/Box\";\r\nimport {\r\n  getFirestore,\r\n  collection,\r\n  addDoc,\r\n  doc,\r\n  getDoc,\r\n  getDocs,\r\n  updateDoc,\r\n} from \"firebase/firestore\";\r\nimport Card from \"@mui/material/Card\";\r\nimport html2canvas from \"html2canvas/dist/html2canvas.min.js\";\r\nimport ReplyIcon from \"@mui/icons-material/Reply\";\r\nimport {\r\n  TextField,\r\n  Button,\r\n  Dialog,\r\n  Typography,\r\n  Modal,\r\n  Rating,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport Text from \"./QuestionType/Text\";\r\n\r\nimport ResponsiveAppBar from \"../Navbar/NavbarUser\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport TextAnswer from \"./QuestionTypesAnswers/TextAnswer\";\r\nimport MultipleChoiceAnswer from \"./QuestionTypesAnswers/MultipleChoiceAnswer\";\r\nimport CheckboxChoiceAnswer from \"./QuestionTypesAnswers/CheckboxChoiceAnswer\";\r\n\r\nimport TrueFalseAnswer from \"./QuestionTypesAnswers/TrueFalseAnswer\";\r\nimport DropdownAnswer from \"./QuestionTypesAnswers/DropdownAnswer\";\r\n\r\nconst FormContainer = styled(\"form\")({\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  alignItems: \"center\",\r\n  marginTop: \"3rem\",\r\n  maxWidth: 750,\r\n  padding: \"20px\",\r\n});\r\nconst SectionTitle = styled(Typography)(({ theme }) => ({\r\n  fontWeight: 600,\r\n  textAlign: \"center\",\r\n  fontSize: \"2rem\",\r\n\r\n  color: \"#333\",\r\n}));\r\n\r\nconst SectionDescription = styled(Typography)(({ theme }) => ({\r\n  margin: `${theme.spacing(2)}px auto`,\r\n\r\n  fontSize: \"1rem\",\r\n\r\n  maxWidth: \"450px\",\r\n  color: \"#333\",\r\n  display: \"flex\",\r\n  justifyContent: \"center\",\r\n  alignItems: \"center\",\r\n}));\r\n\r\nconst SelectLabel = styled(Typography)({\r\n  marginBottom: 8,\r\n  fontWeight: \"bold\",\r\n});\r\n\r\nexport const db = getFirestore();\r\n\r\nconst QuizAnswer = () => {\r\n  const { quizId } = useParams();\r\n  const [quizName, setQuizName] = useState(\"\");\r\n  const [quizDescription, setQuizDescription] = useState(\"\");\r\n  const [questions, setQuestions] = useState([]);\r\n  const [answers, setAnswers] = useState([]);\r\n  const [textFieldValue, setTextFieldValue] = useState(\"\");\r\n  const totalQuestions = questions.length;\r\n\r\n\r\n  const [rating, setRating] = useState(0);\r\n  const [comment, setComment] = useState(\"\");\r\n  const [openModal, setOpenModal] = useState(false);\r\n  const [correctAnswers, setCorrectAnswers] = useState(0)\r\n  const [open, setOpen] = useState(false);\r\n  const [link, setLink] = useState(\"\");\r\n  const percentage = (correctAnswers / totalQuestions) * 100;\r\n  const handleRatingChange = (event, value) => {\r\n    setRating(value);\r\n  };\r\n\r\n  const handleShare = () => {\r\n    setOpen(true);\r\n    setLink(`localhost:3000/quiz/${quizId}`);\r\n  };\r\n\r\n\r\n  const handleCommentChange = (event) => {\r\n    setComment(event.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Dohvati podatke o kvizu iz Firebase baze podataka na temelju njegovog ID-a\r\n    const getQuizData = async () => {\r\n      const quizRef = doc(db, \"quizzes\", quizId);\r\n      const quizData = await getDoc(quizRef);\r\n   \r\n      if (quizData.exists()) {\r\n        // Postavi naziv i opis kviza\r\n        setQuizName(quizData.data().name);\r\n        setQuizDescription(quizData.data().description);\r\n\r\n        const questionsRef = collection(quizRef, \"questions\");\r\n\r\n        const questionsSnapshot = await getDocs(questionsRef);\r\n\r\n        const newQuestions = questionsSnapshot.docs.map((doc) => {\r\n          const questionData = doc.data();\r\n          return {\r\n            id: doc.id,\r\n            question: questionData.question,\r\n            answer: questionData.answer,\r\n            questionType: questionData.questionType,\r\n            options: questionData.options || [],\r\n          };\r\n        });\r\n\r\n        setQuestions(newQuestions);\r\n\r\n        const newAnswers = new Array(newQuestions.length).fill(\"\");\r\n        setAnswers(newAnswers);\r\n      }\r\n    };\r\n\r\n    getQuizData();\r\n  }, [quizId]);\r\n\r\n  const handleAnswer = (e) => {\r\n    e.preventDefault();\r\n    let correctAnswer = 0;\r\n    questions.forEach((question, index) => {\r\n      const answer = answers[index];\r\n\r\n      if (question.questionType === \"text\") {\r\n        if (answer === question.answer) {\r\n          correctAnswer++;\r\n        }\r\n      }\r\n\r\n      if (question.questionType === \"true/false\") {\r\n        if (answer === question.answer) {\r\n          correctAnswer++;\r\n        }\r\n      }\r\n\r\n      if (question.questionType === \"multiple choice\") {\r\n        const selectedOptions = question.options.filter(\r\n          (option) => option.checked\r\n        );\r\n        const selectedLabels = selectedOptions.map((option) => option.label);\r\n        const isCorrect = selectedLabels.every((label) =>\r\n          question.answer.includes(label)\r\n        );\r\n  \r\n        if (\r\n          selectedOptions.length === question.answer.length &&\r\n          isCorrect\r\n        ) {\r\n          correctAnswer++;\r\n        }\r\n      }\r\n    });\r\n    setCorrectAnswers(correctAnswer)\r\n\r\n    setOpenModal(true);\r\n  };\r\n\r\n  return (\r\n    <div id=\"quiz-card-container\">\r\n      <Box sx={{ backgroundColor: \"rgb(238, 242, 246)\", minHeight: \"100vh\" }}>\r\n        <ResponsiveAppBar />\r\n        <Box display=\"flex\" justifyContent=\"center\" marginTop=\"20px\">\r\n          <Card sx={{ minWidth: \"750px\" }}>\r\n            <FormContainer onSubmit={handleAnswer}>\r\n              <Typography>Quiz Name</Typography>\r\n\r\n              <SectionTitle variant=\"h2\">{quizName}</SectionTitle>\r\n              <hr style={{ width: \"64%\", marginBottom: \"10px\" }} />\r\n              <Typography>Quiz Description</Typography>\r\n\r\n              <SectionDescription>{quizDescription}</SectionDescription>\r\n              <hr style={{ width: \"64%\", marginBottom: \"10px\" }} />\r\n\r\n              {questions.map((question, index) => (\r\n                <div key={index}>\r\n                  <SelectLabel variant=\"subtitle1\">\r\n                    {`Question ${index + 1}`}\r\n                  </SelectLabel>\r\n\r\n                  <SelectLabel>{question.question}</SelectLabel>\r\n                  {question.questionType === \"text\" && (\r\n                    <TextAnswer\r\n                      value={answers[index]}\r\n                      onChange={(e) => {\r\n                        const newAnswers = [...answers];\r\n                        newAnswers[index] = e.target.value;\r\n                        setAnswers(newAnswers);\r\n                      }}\r\n                      questionType={question.questionType}\r\n                    />\r\n                  )}\r\n\r\n                  {question.questionType === \"multiple choice\" && (\r\n                    <MultipleChoiceAnswer\r\n                      question={question}\r\n                      index={index}\r\n                      questions={questions}\r\n                      setQuestions={setQuestions}\r\n                    />\r\n                  )}\r\n\r\n                  {question.questionType === \"checkbox\" && (\r\n                    <CheckboxChoiceAnswer\r\n                      question={question}\r\n                      index={index}\r\n                      questions={questions}\r\n                      setQuestions={setQuestions}\r\n                      questionType={question.questionType}\r\n                    />\r\n                  )}\r\n\r\n                  {question.questionType === \"true/false\" && (\r\n                    <TrueFalseAnswer\r\n                      value={answers[index]}\r\n                      onChange={(e) => {\r\n                        const newAnswers = [...answers];\r\n                        newAnswers[index] = e.target.value;\r\n                        setAnswers(newAnswers);\r\n                      }}\r\n                      questionType={question.questionType}\r\n                    />\r\n                  )}\r\n\r\n                  {question.questionType === \"dropdown\" && (\r\n                    <DropdownAnswer\r\n                      \r\n                      question={question}\r\n                      index={index}\r\n                      questions={questions}\r\n                      setQuestions={setQuestions}\r\n                      questionType={question.questionType}\r\n                      onChange={(e) => {\r\n                        const newAnswers = [...answers];\r\n                        newAnswers[index] = e.target.value;\r\n                        setAnswers(newAnswers);\r\n                      }}\r\n                    />\r\n                  )}\r\n\r\n                  <hr style={{ width: \"100%\", marginBottom: \"16px\" }} />\r\n                </div>\r\n              ))}\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                style={{ marginTop: \"16px\", backgroundColor: \"#112240\" }}\r\n                onClick={handleAnswer}\r\n              >\r\n                Submit Your Answer\r\n              </Button>\r\n              <Modal open={openModal}>\r\n                <Box\r\n                  sx={{\r\n                    backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n                    minHeight: \"100vh\",\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"center\",\r\n                    position: \"fixed\",\r\n                    top: 0,\r\n                    left: 0,\r\n                    right: 0,\r\n                    bottom: 0,\r\n                  }}\r\n                >\r\n                  <Card sx={{ minWidth: \"750px\", maxWidth: \"900px\" }}>\r\n                    <FormContainer>\r\n                      <SectionTitle\r\n                        variant=\"h2\"\r\n                        sx={{ textAlign: \"center\", mb: 2 }}\r\n                      >\r\n                        {quizName}\r\n                      </SectionTitle>\r\n                      <Box\r\n                        display=\"flex\"\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"space-between\"\r\n                        mb={1}\r\n                      >\r\n                        <Box display=\"block\" textAlign=\"center\">\r\n                          <Typography variant=\"h6\">\r\n                            You scored {correctAnswers} of {totalQuestions} (\r\n                            {percentage.toFixed(2)}%)\r\n                          </Typography>\r\n                          <Typography variant=\"h6\">Rate this quiz:</Typography>\r\n                          <Rating\r\n                            name=\"rating\"\r\n                            value={rating}\r\n                            onChange={handleRatingChange}\r\n                          />\r\n                        </Box>\r\n                      </Box>\r\n                      <Box sx={{ width: \"65%\" }}>\r\n                        <TextField\r\n                          id=\"comment\"\r\n                          label=\"Add a comment\"\r\n                          multiline\r\n                          rows={4}\r\n                          value={comment}\r\n                          onChange={handleCommentChange}\r\n                          margin=\"normal\"\r\n                          variant=\"outlined\"\r\n                          fullWidth\r\n                          sx={{ mb: 3 }}\r\n                        />\r\n                      </Box>\r\n                      <Box display=\"flex\" justifyContent=\"flex-end\">\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          sx={{\r\n                         \r\n                            borderRadius: \"30px\",\r\n                            backgroundColor: \"#fff\",\r\n                            color: \"#112240\",\r\n                            boxShadow: \"none\",\r\n                            \"&:hover\": {\r\n                              backgroundColor: \"#f1f1f1\",\r\n                              boxShadow: \"none\",\r\n                            },\r\n                          }}\r\n                          onClick={() => (window.location.href = \"/workspace\")}\r\n                        >\r\n                          <ReplyIcon\r\n                            sx={{ fontSize: \"1.8rem\", color: \"#112240\" }}\r\n                          />\r\n                          <Typography variant=\"button\" sx={{ ml: 1, fontSize:\"1rem\" }}>\r\n                            Workspace\r\n                          </Typography>\r\n                          \r\n                        </Button>\r\n\r\n                        <IconButton\r\n                            sx={{\r\n                              color: \"#00bcd4\",\r\n                              \"&:hover\": { color: \"green\" },\r\n                              mr:2, \r\n                            }}\r\n                            onClick={handleShare}\r\n                          >\r\n                            <ShareIcon sx={{ fontSize: \"1.5rem\",  }} />\r\n                            <Typography variant=\"button\" sx={{ ml: 1, fontSize:\"1.2rem\"  }}>\r\n                            Share\r\n                          </Typography>\r\n                          </IconButton>\r\n\r\n                          <Dialog open={open} onClose={() => setOpen(false)}>\r\n                            <Box\r\n                              sx={{\r\n                                p: 2,\r\n                                display: \"flex\",\r\n                                alignItems: \"center\",\r\n                              }}\r\n                            >\r\n                              <TextField value={link} sx={{ mr: 2 }} />\r\n                              <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                startIcon={<FileCopyIcon />}\r\n                                onClick={() => {\r\n                                  navigator.clipboard.writeText(link);\r\n                                  toast.success(\"Link copied to clipboard\");\r\n                                }}\r\n                              >\r\n                                Copy\r\n                              </Button>\r\n                            </Box>\r\n                          </Dialog>\r\n                        <Button\r\n                          type=\"submit\"\r\n                          variant=\"contained\"\r\n                          sx={{\r\n                            borderRadius: \"30px\",\r\n                            backgroundColor: \"#112240\",\r\n                            color: \"#fff\",\r\n                            boxShadow: \"none\",\r\n                            \"&:hover\": {\r\n                              backgroundColor: \"#0c1a33\",\r\n                              boxShadow: \"none\",\r\n                            },\r\n                          }}\r\n                        >\r\n                          Submit\r\n                        </Button>\r\n                      </Box>\r\n                    </FormContainer>\r\n                  </Card>\r\n                </Box>\r\n              </Modal>\r\n            </FormContainer>\r\n          </Card>\r\n        </Box>\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizAnswer;\r\n"
        }
    ]
}