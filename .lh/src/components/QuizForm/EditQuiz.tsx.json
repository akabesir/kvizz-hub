{
    "sourceFile": "src/components/QuizForm/EditQuiz.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 44,
            "patches": [
                {
                    "date": 1684293003065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1684293009095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -351,9 +351,9 @@\n                         marginBottom: \"16px\",\r\n                         marginTop: \"16px\",\r\n                       }}\r\n                     >\r\n-                      Remove Questiona\r\n+                      Remove Question\r\n                     </Button>\r\n                   </Box>\r\n                   <hr style={{ width: \"100%\", marginBottom: \"16px\" }} />\r\n                 </div>\r\n"
                },
                {
                    "date": 1684293498242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,13 @@\n-import React, { useState, useEffect } from \"react\";\r\n+import React, { useState, useEffect, useRef } from \"react\";\r\n \r\n import Box from \"@mui/material/Box\";\r\n import {\r\n   getFirestore,\r\n   collection,\r\n   addDoc,\r\n   doc,\r\n+  deleteDoc,\r\n   getDoc,\r\n   setDoc,\r\n   getDocs,\r\n   orderBy,\r\n@@ -24,8 +25,9 @@\n import TrueFalseChoice from \"./QuestionType/TrueFalseChoice\";\r\n import Dropdown from \"./QuestionType/Dropdown\";\r\n import ResponsiveAppBar from \"../Navbar/NavbarUser\";\r\n import { useParams } from \"react-router-dom\";\r\n+import { auth } from \"../../firebase/firebase\";\r\n \r\n const FormContainer = styled(\"form\")({\r\n   display: \"flex\",\r\n   flexDirection: \"column\",\r\n@@ -75,21 +77,20 @@\n         // Postavi naziv i opis kviza\r\n         setQuizName(quizData.data().name);\r\n         setQuizDescription(quizData.data().description);\r\n \r\n-        // Dohvati pitanja za ovaj kviz i postavi ih u stanje\r\n         const questionsRef = collection(quizRef, \"questions\");\r\n-        const questionsSnapshot = await getDocs(query(questionsRef, orderBy(\"id\")));\r\n \r\n+        const questionsSnapshot = await getDocs(questionsRef);\r\n+\r\n         const newQuestions = questionsSnapshot.docs.map((doc) => {\r\n           const questionData = doc.data();\r\n           return {\r\n             id: doc.id,\r\n             question: questionData.question,\r\n             answer: questionData.answer,\r\n             questionType: questionData.questionType,\r\n             options: questionData.options || [],\r\n-      \r\n           };\r\n         });\r\n \r\n         setQuestions(newQuestions);\r\n@@ -97,9 +98,12 @@\n     };\r\n \r\n     getQuizData();\r\n   }, [quizId]);\r\n-\r\n+ \r\n+  const currentUser = auth.currentUser;\r\n+  const uid = currentUser.uid;\r\n+  \r\n   let currentDate = new Date();\r\n   let day = currentDate.toLocaleString(\"default\", { weekday: \"short\" });\r\n   let month = currentDate.toLocaleString(\"default\", { month: \"short\" });\r\n   let date = currentDate.getDate();\r\n@@ -121,27 +125,21 @@\n   const handleAddQuestion = () => {\r\n     setQuestions([\r\n       ...questions,\r\n       {\r\n-        id: questions.length + 1,\r\n+        id: questions[questions.length - 1].id + 1,\r\n         question: \"\",\r\n         answer: \"\",\r\n         questionType: \"text\",\r\n         options: [],\r\n       },\r\n     ]);\r\n     setQuestionType([\r\n       ...questionType,\r\n-      { questionId: questions.length + 1, type: \"text\" },\r\n+      { questionId: questionType.length + 1, type: \"text\" },\r\n     ]);\r\n   };\r\n \r\n-  const handleRemoveQuestion = (questionId) => {\r\n-    const updatedQuestions = questions.filter((question) => question.id == questionId);\r\n-    setQuestions(updatedQuestions);\r\n-    \r\n-  }\r\n-\r\n   const handleSubmit = async (event) => {\r\n     event.preventDefault();\r\n \r\n     try {\r\n@@ -151,8 +149,9 @@\n       const quizImage = canvas.toDataURL(\"image/png\");\r\n \r\n       // Stvorite novi objekt sa svim ažuriranim podacima\r\n       const updatedQuiz = {\r\n+        author_id: uid, \r\n         name: quizName,\r\n         description: quizDescription,\r\n         quizImage: quizImage,\r\n         createdAt: createdAt,\r\n@@ -161,9 +160,9 @@\n \r\n       // Stvorite novi objekt newQuestions koji sadrži sve postojeće pitanja u kvizu\r\n       const newQuestions = questions.map((question) => {\r\n         return {\r\n-          id: question.id,\r\n+          id: questions[questions.length - 1].id + 1,\r\n           question: question.question,\r\n           answer: question.answer,\r\n           questionType: question.questionType,\r\n           options: question.options,\r\n@@ -210,10 +209,31 @@\n     }\r\n   };\r\n \r\n \r\n+  \r\n+  const handleRemoveQuestion = async (questionId) => {\r\n+    // prvo izbrišemo pitanje iz Firebase baze podataka\r\n+    const buttonRef = useRef(null);\r\n \r\n+    if (buttonRef.current.classList.contains(\"edit\")) {\r\n+ \r\n+        // prvo izbrišemo pitanje iz Firebase baze podataka\r\n+        const quizRef = doc(db, \"quizzes\", quizId);\r\n+        const questionRef = doc(quizRef, \"questions\", questionId);\r\n+        await deleteDoc(questionRef);\r\n \r\n+        // a zatim izbrišemo pitanje iz stanja komponente\r\n+        setQuestions((prevQuestions) =>\r\n+          prevQuestions.filter((question) => question.id !== questionId)\r\n+        );\r\n+    } else {\r\n+      // ako nije kliknut gumb \"Uredi kviz\", samo ažuriraj stanje pitanja u komponenti\r\n+      setQuestions((prevQuestions) =>\r\n+          prevQuestions.filter((question) => question.id !== questionId)\r\n+        );\r\n+    }\r\n+  };\r\n \r\n   const createQuizButtonDisabled = questions.length === 0;\r\n   return (\r\n     <div id=\"quiz-card-container\">\r\n@@ -344,14 +364,14 @@\n                   <Box display=\"flex\" justifyContent=\"center\">\r\n                     <Button\r\n                       variant=\"contained\"\r\n                       color=\"secondary\"\r\n-                      onClick={() => handleRemoveQuestion(question.id)}\r\n                       style={{\r\n                         margin: \"0 auto\",\r\n                         marginBottom: \"16px\",\r\n                         marginTop: \"16px\",\r\n                       }}\r\n+                      onClick={() => handleRemoveQuestion(question.id)}\r\n                     >\r\n                       Remove Question\r\n                     </Button>\r\n                   </Box>\r\n@@ -363,8 +383,9 @@\n                 Add Question\r\n               </Button>\r\n               {questions.length > 0 && (\r\n                 <Button\r\n+                  className=\"edit\"\r\n                   type=\"submit\"\r\n                   variant=\"contained\"\r\n                   style={{ marginTop: \"16px\", backgroundColor: \"#112240\" }}\r\n                 >\r\n"
                },
                {
                    "date": 1684293716844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,9 +154,8 @@\n         name: quizName,\r\n         description: quizDescription,\r\n         quizImage: quizImage,\r\n         createdAt: createdAt,\r\n-        questions: [],\r\n       };\r\n \r\n       // Stvorite novi objekt newQuestions koji sadrži sve postojeće pitanja u kvizu\r\n       const newQuestions = questions.map((question) => {\r\n"
                },
                {
                    "date": 1684294133256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,23 +122,20 @@\n     setQuizDescription(event.target.value);\r\n   };\r\n \r\n   const handleAddQuestion = () => {\r\n-    setQuestions([\r\n-      ...questions,\r\n+    setQuestions(prevQuestions => [\r\n+      ...prevQuestions,\r\n       {\r\n-        id: questions[questions.length - 1].id + 1,\r\n+        id: prevQuestions.length > 0 ? prevQuestions[prevQuestions.length - 1].id + 1 : 1,\r\n         question: \"\",\r\n         answer: \"\",\r\n         questionType: \"text\",\r\n         options: [],\r\n       },\r\n     ]);\r\n-    setQuestionType([\r\n-      ...questionType,\r\n-      { questionId: questionType.length + 1, type: \"text\" },\r\n-    ]);\r\n   };\r\n+  \r\n \r\n   const handleSubmit = async (event) => {\r\n     event.preventDefault();\r\n \r\n"
                },
                {
                    "date": 1684294147602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -207,30 +207,16 @@\n \r\n \r\n   \r\n   const handleRemoveQuestion = async (questionId) => {\r\n-    // prvo izbrišemo pitanje iz Firebase baze podataka\r\n-    const buttonRef = useRef(null);\r\n-\r\n-    if (buttonRef.current.classList.contains(\"edit\")) {\r\n- \r\n-        // prvo izbrišemo pitanje iz Firebase baze podataka\r\n-        const quizRef = doc(db, \"quizzes\", quizId);\r\n-        const questionRef = doc(quizRef, \"questions\", questionId);\r\n-        await deleteDoc(questionRef);\r\n-\r\n-        // a zatim izbrišemo pitanje iz stanja komponente\r\n-        setQuestions((prevQuestions) =>\r\n-          prevQuestions.filter((question) => question.id !== questionId)\r\n-        );\r\n-    } else {\r\n-      // ako nije kliknut gumb \"Uredi kviz\", samo ažuriraj stanje pitanja u komponenti\r\n-      setQuestions((prevQuestions) =>\r\n-          prevQuestions.filter((question) => question.id !== questionId)\r\n-        );\r\n+    if (window.confirm(\"Are you sure you want to remove this question?\")) {\r\n+      const updatedQuestions = questions.filter(\r\n+        (question) => question.id !== questionId\r\n+      );\r\n+      setQuestions(updatedQuestions);\r\n     }\r\n   };\r\n-\r\n+  \r\n   const createQuizButtonDisabled = questions.length === 0;\r\n   return (\r\n     <div id=\"quiz-card-container\">\r\n       <Box sx={{ backgroundColor: \"rgb(238, 242, 246)\", minHeight: \"100vh\" }}>\r\n"
                },
                {
                    "date": 1684294697098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,23 +1,9 @@\n-import React, { useState, useEffect, useRef } from \"react\";\r\n-\r\n+import React, { useState, useEffect } from \"react\";\r\n import Box from \"@mui/material/Box\";\r\n-import {\r\n-  getFirestore,\r\n-  collection,\r\n-  addDoc,\r\n-  doc,\r\n-  deleteDoc,\r\n-  getDoc,\r\n-  setDoc,\r\n-  getDocs,\r\n-  orderBy,\r\n-  query,\r\n-  updateDoc,\r\n-} from \"firebase/firestore\";\r\n+import { getFirestore, doc, getDoc, setDoc, collection, getDocs } from \"firebase/firestore\";\r\n import Card from \"@mui/material/Card\";\r\n import html2canvas from \"html2canvas/dist/html2canvas.min.js\";\r\n-\r\n import { TextField, Button, Select, MenuItem, Typography } from \"@mui/material\";\r\n import { styled } from \"@mui/material/styles\";\r\n import Text from \"./QuestionType/Text\";\r\n import CheckboxChoice from \"./QuestionType/CheckboxChoice\";\r\n@@ -35,8 +21,9 @@\n   marginTop: \"3rem\",\r\n   maxWidth: 750,\r\n   padding: \"20px\",\r\n });\r\n+\r\n const SectionTitle = styled(Typography)(({ theme }) => ({\r\n   marginTop: theme.spacing(2),\r\n   marginBottom: theme.spacing(2),\r\n   fontWeight: \"bold\",\r\n@@ -54,35 +41,27 @@\n   marginBottom: 8,\r\n   fontWeight: \"bold\",\r\n });\r\n \r\n-export const db = getFirestore();\r\n+const db = getFirestore();\r\n \r\n const EditQuiz = () => {\r\n   const { quizId } = useParams();\r\n   const [quizName, setQuizName] = useState(\"\");\r\n   const [quizDescription, setQuizDescription] = useState(\"\");\r\n-  const [quizImage, setQuizImage] = useState(null);\r\n-  const [options, setOptions] = useState([]);\r\n-  const [newOption, setNewOption] = useState(\"\");\r\n-  const [questionType, setQuestionType] = useState([]);\r\n   const [questions, setQuestions] = useState([]);\r\n \r\n   useEffect(() => {\r\n-    // Dohvati podatke o kvizu iz Firebase baze podataka na temelju njegovog ID-a\r\n     const getQuizData = async () => {\r\n       const quizRef = doc(db, \"quizzes\", quizId);\r\n       const quizData = await getDoc(quizRef);\r\n \r\n       if (quizData.exists()) {\r\n-        // Postavi naziv i opis kviza\r\n         setQuizName(quizData.data().name);\r\n         setQuizDescription(quizData.data().description);\r\n \r\n         const questionsRef = collection(quizRef, \"questions\");\r\n-\r\n         const questionsSnapshot = await getDocs(questionsRef);\r\n-\r\n         const newQuestions = questionsSnapshot.docs.map((doc) => {\r\n           const questionData = doc.data();\r\n           return {\r\n             id: doc.id,\r\n@@ -98,12 +77,12 @@\n     };\r\n \r\n     getQuizData();\r\n   }, [quizId]);\r\n- \r\n+\r\n   const currentUser = auth.currentUser;\r\n   const uid = currentUser.uid;\r\n-  \r\n+\r\n   let currentDate = new Date();\r\n   let day = currentDate.toLocaleString(\"default\", { weekday: \"short\" });\r\n   let month = currentDate.toLocaleString(\"default\", { month: \"short\" });\r\n   let date = currentDate.getDate();\r\n@@ -122,8 +101,10 @@\n     setQuizDescription(event.target.value);\r\n   };\r\n \r\n   const handleAddQuestion = () => {\r\n+    setQuestions\r\n+\r\n     setQuestions(prevQuestions => [\r\n       ...prevQuestions,\r\n       {\r\n         id: prevQuestions.length > 0 ? prevQuestions[prevQuestions.length - 1].id + 1 : 1,\r\n"
                },
                {
                    "date": 1684294702969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,10 +101,9 @@\n     setQuizDescription(event.target.value);\r\n   };\r\n \r\n   const handleAddQuestion = () => {\r\n-    setQuestions\r\n-\r\n+    \r\n     setQuestions(prevQuestions => [\r\n       ...prevQuestions,\r\n       {\r\n         id: prevQuestions.length > 0 ? prevQuestions[prevQuestions.length - 1].id + 1 : 1,\r\n"
                },
                {
                    "date": 1684294736988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,16 +133,13 @@\n         quizImage: quizImage,\r\n         createdAt: createdAt,\r\n       };\r\n \r\n-      // Stvorite novi objekt newQuestions koji sadrži sve postojeće pitanja u kvizu\r\n-      const newQuestions = questions.map((question) => {\r\n+       // Stvorite novi objekt newQuestions koji sadrži sve postojeće pitanja u kvizu\r\n+    const newQuestions = questions.map((question, index) => {\r\n         return {\r\n-          id: questions[questions.length - 1].id + 1,\r\n-          question: question.question,\r\n-          answer: question.answer,\r\n-          questionType: question.questionType,\r\n-          options: question.options,\r\n+          ...question,\r\n+          id: index + 1,\r\n         };\r\n       });\r\n \r\n       // Dodajte nova pitanja u novi objekt newQuestions\r\n"
                },
                {
                    "date": 1684294760128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,15 +172,15 @@\n         });\r\n       }\r\n \r\n       // Ažurirajte dokument s novim podacima o kvizu\r\n-      const quizRef = doc(db, \"quizzes\", quizId);\r\n-      await setDoc(quizRef, updatedQuiz);\r\n-      alert(\"Editing Quiz..\");\r\n-      window.location.href = \"/workspace\";\r\n-    } catch (error) {\r\n-      console.error(error);\r\n-    }\r\n+    const quizRef = doc(db, \"quizzes\", quizId);\r\n+    await updateDoc(quizRef, updatedQuiz);\r\n+    alert(\"Editing Quiz..\");\r\n+    window.location.href = \"/workspace\";\r\n+  } catch (error) {\r\n+    console.error(error);\r\n+  }\r\n   };\r\n \r\n \r\n   \r\n"
                },
                {
                    "date": 1684294775055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n   const { quizId } = useParams();\r\n   const [quizName, setQuizName] = useState(\"\");\r\n   const [quizDescription, setQuizDescription] = useState(\"\");\r\n   const [questions, setQuestions] = useState([]);\r\n-\r\n+ const [options,setOptions] = useState()\r\n   useEffect(() => {\r\n     const getQuizData = async () => {\r\n       const quizRef = doc(db, \"quizzes\", quizId);\r\n       const quizData = await getDoc(quizRef);\r\n"
                },
                {
                    "date": 1684294784740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n   const { quizId } = useParams();\r\n   const [quizName, setQuizName] = useState(\"\");\r\n   const [quizDescription, setQuizDescription] = useState(\"\");\r\n   const [questions, setQuestions] = useState([]);\r\n- const [options,setOptions] = useState()\r\n+ const [options,setOptions] = useState([])\r\n   useEffect(() => {\r\n     const getQuizData = async () => {\r\n       const quizRef = doc(db, \"quizzes\", quizId);\r\n       const quizData = await getDoc(quizRef);\r\n@@ -141,20 +141,9 @@\n           id: index + 1,\r\n         };\r\n       });\r\n \r\n-      // Dodajte nova pitanja u novi objekt newQuestions\r\n-      for (let i = 0; i < options.length; i++) {\r\n-        if (options[i] !== \"\") {\r\n-          newQuestions.push({\r\n-            id: newQuestions.length + 1,\r\n-            question: \"\",\r\n-            answer: \"\",\r\n-            questionType: options[i],\r\n-            options: [],\r\n-          });\r\n-        }\r\n-      }\r\n+     \r\n \r\n       // Ažurirajte novo stanje objekta sa novim pitanjima\r\n       setQuestions(newQuestions);\r\n \r\n"
                },
                {
                    "date": 1684294800347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,14 +172,17 @@\n   };\r\n \r\n \r\n   \r\n-  const handleRemoveQuestion = async (questionId) => {\r\n+const handleRemoveQuestion = async (questionId) => {\r\n     if (window.confirm(\"Are you sure you want to remove this question?\")) {\r\n       const updatedQuestions = questions.filter(\r\n         (question) => question.id !== questionId\r\n       );\r\n-      setQuestions(updatedQuestions);\r\n+      setQuestions(updatedQuestions.map((question, index) => ({\r\n+        ...question,\r\n+        id: index + 1,\r\n+      })));\r\n     }\r\n   };\r\n   \r\n   const createQuizButtonDisabled = questions.length === 0;\r\n"
                },
                {
                    "date": 1684295026747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useState, useEffect } from \"react\";\r\n import Box from \"@mui/material/Box\";\r\n-import { getFirestore, doc, getDoc, setDoc, collection, getDocs } from \"firebase/firestore\";\r\n+import { getFirestore, doc, getDoc, setDoc, collection, getDocs,updateDoc } from \"firebase/firestore\";\r\n import Card from \"@mui/material/Card\";\r\n import html2canvas from \"html2canvas/dist/html2canvas.min.js\";\r\n import { TextField, Button, Select, MenuItem, Typography } from \"@mui/material\";\r\n import { styled } from \"@mui/material/styles\";\r\n@@ -172,20 +172,25 @@\n   };\r\n \r\n \r\n   \r\n-const handleRemoveQuestion = async (questionId) => {\r\n+  const handleRemoveQuestion = async (questionId) => {\r\n     if (window.confirm(\"Are you sure you want to remove this question?\")) {\r\n       const updatedQuestions = questions.filter(\r\n         (question) => question.id !== questionId\r\n       );\r\n-      setQuestions(updatedQuestions.map((question, index) => ({\r\n+  \r\n+      // Update the IDs of the remaining questions\r\n+      const updatedQuestionsWithIDs = updatedQuestions.map((question, index) => ({\r\n         ...question,\r\n         id: index + 1,\r\n-      })));\r\n+      }));\r\n+  \r\n+      setQuestions(updatedQuestionsWithIDs);\r\n     }\r\n   };\r\n   \r\n+  \r\n   const createQuizButtonDisabled = questions.length === 0;\r\n   return (\r\n     <div id=\"quiz-card-container\">\r\n       <Box sx={{ backgroundColor: \"rgb(238, 242, 246)\", minHeight: \"100vh\" }}>\r\n"
                },
                {
                    "date": 1684295098461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,8 @@\n   }\r\n   };\r\n \r\n \r\n-  \r\n   const handleRemoveQuestion = async (questionId) => {\r\n     if (window.confirm(\"Are you sure you want to remove this question?\")) {\r\n       const updatedQuestions = questions.filter(\r\n         (question) => question.id !== questionId\r\n@@ -185,12 +184,17 @@\n         id: index + 1,\r\n       }));\r\n   \r\n       setQuestions(updatedQuestionsWithIDs);\r\n+  \r\n+      // Remove the question from the Firestore database\r\n+      const questionRef = doc(db, \"quizzes\", quizId, \"questions\", questionId.toString());\r\n+      await deleteDoc(questionRef);\r\n     }\r\n   };\r\n   \r\n   \r\n+  \r\n   const createQuizButtonDisabled = questions.length === 0;\r\n   return (\r\n     <div id=\"quiz-card-container\">\r\n       <Box sx={{ backgroundColor: \"rgb(238, 242, 246)\", minHeight: \"100vh\" }}>\r\n"
                },
                {
                    "date": 1684295177469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useState, useEffect } from \"react\";\r\n import Box from \"@mui/material/Box\";\r\n-import { getFirestore, doc, getDoc, setDoc, collection, getDocs,updateDoc } from \"firebase/firestore\";\r\n+import { getFirestore, doc, getDoc, setDoc, collection, getDocs,updateDoc,deleteDoc } from \"firebase/firestore\";\r\n import Card from \"@mui/material/Card\";\r\n import html2canvas from \"html2canvas/dist/html2canvas.min.js\";\r\n import { TextField, Button, Select, MenuItem, Typography } from \"@mui/material\";\r\n import { styled } from \"@mui/material/styles\";\r\n"
                },
                {
                    "date": 1684295227614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,8 +188,17 @@\n   \r\n       // Remove the question from the Firestore database\r\n       const questionRef = doc(db, \"quizzes\", quizId, \"questions\", questionId.toString());\r\n       await deleteDoc(questionRef);\r\n+  \r\n+      // Reorder the remaining questions in the database\r\n+      const batch = [];\r\n+      updatedQuestionsWithIDs.forEach((question, index) => {\r\n+        const updatedQuestionRef = doc(db, \"quizzes\", quizId, \"questions\", question.id.toString());\r\n+        batch.push(updateDoc(updatedQuestionRef, { id: index + 1 }));\r\n+      });\r\n+  \r\n+      await Promise.all(batch);\r\n     }\r\n   };\r\n   \r\n   \r\n"
                },
                {
                    "date": 1684323608011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,23 +99,22 @@\n \r\n   const handleQuizDescriptionChange = (event) => {\r\n     setQuizDescription(event.target.value);\r\n   };\r\n-\r\n   const handleAddQuestion = () => {\r\n-    \r\n     setQuestions(prevQuestions => [\r\n       ...prevQuestions,\r\n       {\r\n-        id: prevQuestions.length > 0 ? prevQuestions[prevQuestions.length - 1].id + 1 : 1,\r\n+        id: Date.now(), // Generirajte jedinstveni ID koristeći vremensku oznaku\r\n         question: \"\",\r\n         answer: \"\",\r\n         questionType: \"text\",\r\n         options: [],\r\n       },\r\n     ]);\r\n   };\r\n   \r\n+  \r\n \r\n   const handleSubmit = async (event) => {\r\n     event.preventDefault();\r\n \r\n"
                },
                {
                    "date": 1684323659534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,20 +172,27 @@\n \r\n \r\n   const handleRemoveQuestion = async (questionId) => {\r\n     if (window.confirm(\"Are you sure you want to remove this question?\")) {\r\n-      const updatedQuestions = questions.filter(\r\n-        (question) => question.id !== questionId\r\n-      );\r\n+        const updatedQuestions = questions.filter(\r\n+          (question) => question.id !== questionId\r\n+        );\r\n+    \r\n+        // Update the IDs of the remaining questions\r\n+        const updatedQuestionsWithIDs = updatedQuestions.map((question, index) => ({\r\n+          ...question,\r\n+          id: index + 1,\r\n+        }));\r\n+    \r\n+        setQuestions(updatedQuestionsWithIDs);\r\n+    \r\n+        // Update newQuestions as well\r\n+        const newQuestions = updatedQuestionsWithIDs.map((question, index) => ({\r\n+          ...question,\r\n+          id: index + 1,\r\n+        }));\r\n+    \r\n   \r\n-      // Update the IDs of the remaining questions\r\n-      const updatedQuestionsWithIDs = updatedQuestions.map((question, index) => ({\r\n-        ...question,\r\n-        id: index + 1,\r\n-      }));\r\n-  \r\n-      setQuestions(updatedQuestionsWithIDs);\r\n-  \r\n       // Remove the question from the Firestore database\r\n       const questionRef = doc(db, \"quizzes\", quizId, \"questions\", questionId.toString());\r\n       await deleteDoc(questionRef);\r\n   \r\n"
                },
                {
                    "date": 1684324382653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,15 +184,9 @@\n         }));\r\n     \r\n         setQuestions(updatedQuestionsWithIDs);\r\n     \r\n-        // Update newQuestions as well\r\n-        const newQuestions = updatedQuestionsWithIDs.map((question, index) => ({\r\n-          ...question,\r\n-          id: index + 1,\r\n-        }));\r\n-    \r\n-  \r\n+     \r\n       // Remove the question from the Firestore database\r\n       const questionRef = doc(db, \"quizzes\", quizId, \"questions\", questionId.toString());\r\n       await deleteDoc(questionRef);\r\n   \r\n"
                },
                {
                    "date": 1684324400736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,10 +142,8 @@\n       });\r\n \r\n      \r\n \r\n-      // Ažurirajte novo stanje objekta sa novim pitanjima\r\n-      setQuestions(newQuestions);\r\n \r\n       // Stvorite podkolekciju \"questions\" za ažuriranje u bazi podataka\r\n       const questionsRef = collection(doc(db, \"quizzes\", quizId), \"questions\");\r\n \r\n"
                },
                {
                    "date": 1684324497746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n import Dropdown from \"./QuestionType/Dropdown\";\r\n import ResponsiveAppBar from \"../Navbar/NavbarUser\";\r\n import { useParams } from \"react-router-dom\";\r\n import { auth } from \"../../firebase/firebase\";\r\n+import { v4 as uuidv4 } from \"uuid\";\r\n \r\n const FormContainer = styled(\"form\")({\r\n   display: \"flex\",\r\n   flexDirection: \"column\",\r\n"
                },
                {
                    "date": 1684324512281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,9 +104,9 @@\n   const handleAddQuestion = () => {\r\n     setQuestions(prevQuestions => [\r\n       ...prevQuestions,\r\n       {\r\n-        id: Date.now(), // Generirajte jedinstveni ID koristeći vremensku oznaku\r\n+        id: uuidv4(), // Generirajte jedinstveni ID koristeći vremensku oznaku\r\n         question: \"\",\r\n         answer: \"\",\r\n         questionType: \"text\",\r\n         options: [],\r\n"
                },
                {
                    "date": 1684325188980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,8 +151,9 @@\n       // Spremite svako pitanje u podkolekciju \"questions\"\r\n       for (const question of newQuestions) {\r\n         const questionRef = doc(questionsRef, question.id.toString());\r\n         await setDoc(questionRef, {\r\n+            id\r\n           question: question.question,\r\n           answer: question.answer,\r\n           questionType: question.questionType,\r\n           options: question.options,\r\n"
                },
                {
                    "date": 1684325406975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,9 +151,9 @@\n       // Spremite svako pitanje u podkolekciju \"questions\"\r\n       for (const question of newQuestions) {\r\n         const questionRef = doc(questionsRef, question.id.toString());\r\n         await setDoc(questionRef, {\r\n-            id\r\n+            id: uuidv4(),\r\n           question: question.question,\r\n           answer: question.answer,\r\n           questionType: question.questionType,\r\n           options: question.options,\r\n@@ -172,21 +172,20 @@\n \r\n \r\n   const handleRemoveQuestion = async (questionId) => {\r\n     if (window.confirm(\"Are you sure you want to remove this question?\")) {\r\n-        const updatedQuestions = questions.filter(\r\n-          (question) => question.id !== questionId\r\n-        );\r\n-    \r\n-        // Update the IDs of the remaining questions\r\n-        const updatedQuestionsWithIDs = updatedQuestions.map((question, index) => ({\r\n-          ...question,\r\n-          id: index + 1,\r\n-        }));\r\n-    \r\n-        setQuestions(updatedQuestionsWithIDs);\r\n-    \r\n-     \r\n+      const updatedQuestions = questions.filter(\r\n+        (question) => question.id !== questionId\r\n+      );\r\n+  \r\n+      // Update the IDs of the remaining questions\r\n+      const updatedQuestionsWithIDs = updatedQuestions.map((question, index) => ({\r\n+        ...question,\r\n+        id: index + 1,\r\n+      }));\r\n+  \r\n+      setQuestions(updatedQuestionsWithIDs);\r\n+  \r\n       // Remove the question from the Firestore database\r\n       const questionRef = doc(db, \"quizzes\", quizId, \"questions\", questionId.toString());\r\n       await deleteDoc(questionRef);\r\n   \r\n@@ -201,9 +200,8 @@\n     }\r\n   };\r\n   \r\n   \r\n-  \r\n   const createQuizButtonDisabled = questions.length === 0;\r\n   return (\r\n     <div id=\"quiz-card-container\">\r\n       <Box sx={{ backgroundColor: \"rgb(238, 242, 246)\", minHeight: \"100vh\" }}>\r\n"
                },
                {
                    "date": 1684325413901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -179,9 +179,9 @@\n   \r\n       // Update the IDs of the remaining questions\r\n       const updatedQuestionsWithIDs = updatedQuestions.map((question, index) => ({\r\n         ...question,\r\n-        id: index + 1,\r\n+        id: uuidv4(),\r\n       }));\r\n   \r\n       setQuestions(updatedQuestionsWithIDs);\r\n   \r\n"
                },
                {
                    "date": 1684339311396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,8 +91,18 @@\n   let hours = currentDate.getHours();\r\n   let minutes = currentDate.getMinutes();\r\n   let seconds = currentDate.getSeconds();\r\n \r\n+  const [editOpen, setEditOpen] = useState(false);\r\n+  const [reviewOpen, setReviewOpen] = useState(false);\r\n+\r\n+  const handleEdit = () => {\r\n+    setEditOpen(true);\r\n+  };\r\n+\r\n+  const handleReview = () => {\r\n+    setReviewOpen(true);\r\n+  };\r\n   let createdAt = `${day} ${month} ${date} ${year} ${hours}:${minutes}:${seconds}`;\r\n \r\n   const handleQuizNameChange = (event) => {\r\n     setQuizName(event.target.value);\r\n@@ -192,9 +202,9 @@\n       // Reorder the remaining questions in the database\r\n       const batch = [];\r\n       updatedQuestionsWithIDs.forEach((question, index) => {\r\n         const updatedQuestionRef = doc(db, \"quizzes\", quizId, \"questions\", question.id.toString());\r\n-        batch.push(updateDoc(updatedQuestionRef, { id: index + 1 }));\r\n+        batch.push(updateDoc(updatedQuestionRef, { id: uuidv4() }));\r\n       });\r\n   \r\n       await Promise.all(batch);\r\n     }\r\n"
                },
                {
                    "date": 1684339376099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,31 @@\n   maxWidth: 750,\r\n   padding: \"20px\",\r\n });\r\n \r\n+const ButtonContainer = styled(Box)({\r\n+    display: \"flex\",\r\n+    justifyContent: \"center\",\r\n+    marginTop: \"1rem\",\r\n+  });\r\n+  \r\n+  const EditButton = styled(Button)({\r\n+    backgroundColor: \"#f50057\",\r\n+    color: \"#fff\",\r\n+    marginRight: \"1rem\",\r\n+    \"&:hover\": {\r\n+      backgroundColor: \"#d5004f\",\r\n+    },\r\n+  });\r\n+  \r\n+  const ReviewButton = styled(Button)({\r\n+    backgroundColor: \"#2196f3\",\r\n+    color: \"#fff\",\r\n+    \"&:hover\": {\r\n+      backgroundColor: \"#1976d2\",\r\n+    },\r\n+  });\r\n+\r\n const SectionTitle = styled(Typography)(({ theme }) => ({\r\n   marginTop: theme.spacing(2),\r\n   marginBottom: theme.spacing(2),\r\n   fontWeight: \"bold\",\r\n"
                },
                {
                    "date": 1684339406651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,8 +238,16 @@\n   return (\r\n     <div id=\"quiz-card-container\">\r\n       <Box sx={{ backgroundColor: \"rgb(238, 242, 246)\", minHeight: \"100vh\" }}>\r\n         <ResponsiveAppBar />\r\n+        <ButtonContainer>\r\n+        <EditButton variant=\"contained\" onClick={handleEdit}>\r\n+          Edit\r\n+        </EditButton>\r\n+        <ReviewButton variant=\"contained\" onClick={handleReview}>\r\n+          Review\r\n+        </ReviewButton>\r\n+      </ButtonContainer>\r\n         <Box display=\"flex\" justifyContent=\"center\" marginTop=\"20px\">\r\n           <Card sx={{ minWidth: \"750px\" }}>\r\n             <FormContainer onSubmit={handleSubmit}>\r\n               <SectionTitle>\r\n"
                },
                {
                    "date": 1684339432150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -247,8 +247,9 @@\n           Review\r\n         </ReviewButton>\r\n       </ButtonContainer>\r\n         <Box display=\"flex\" justifyContent=\"center\" marginTop=\"20px\">\r\n+        {editOpen && (\r\n           <Card sx={{ minWidth: \"750px\" }}>\r\n             <FormContainer onSubmit={handleSubmit}>\r\n               <SectionTitle>\r\n                 <input\r\n"
                },
                {
                    "date": 1684339440945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -402,8 +402,9 @@\n                 </Button>\r\n               )}\r\n             </FormContainer>\r\n           </Card>\r\n+        )}\r\n         </Box>\r\n       </Box>\r\n     </div>\r\n   );\r\n"
                },
                {
                    "date": 1684339452070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -403,8 +403,13 @@\n               )}\r\n             </FormContainer>\r\n           </Card>\r\n         )}\r\n+        {reviewOpen && (\r\n+        <Card>\r\n+          {/* Stranica za review */}\r\n+        </Card>\r\n+      )}\r\n         </Box>\r\n       </Box>\r\n     </div>\r\n   );\r\n"
                },
                {
                    "date": 1684339542131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,9 +114,9 @@\n   let hours = currentDate.getHours();\r\n   let minutes = currentDate.getMinutes();\r\n   let seconds = currentDate.getSeconds();\r\n \r\n-  const [editOpen, setEditOpen] = useState(false);\r\n+  const [editOpen, setEditOpen] = useState(true);\r\n   const [reviewOpen, setReviewOpen] = useState(false);\r\n \r\n   const handleEdit = () => {\r\n     setEditOpen(true);\r\n"
                },
                {
                    "date": 1684339557629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,8 +119,9 @@\n   const [reviewOpen, setReviewOpen] = useState(false);\r\n \r\n   const handleEdit = () => {\r\n     setEditOpen(true);\r\n+    setReviewOpen(false)\r\n   };\r\n \r\n   const handleReview = () => {\r\n     setReviewOpen(true);\r\n"
                },
                {
                    "date": 1684339830439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n import ResponsiveAppBar from \"../Navbar/NavbarUser\";\r\n import { useParams } from \"react-router-dom\";\r\n import { auth } from \"../../firebase/firebase\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n-\r\n+QuizR\r\n const FormContainer = styled(\"form\")({\r\n   display: \"flex\",\r\n   flexDirection: \"column\",\r\n   alignItems: \"center\",\r\n@@ -124,8 +124,9 @@\n   };\r\n \r\n   const handleReview = () => {\r\n     setReviewOpen(true);\r\n+    setEditOpen(false)\r\n   };\r\n   let createdAt = `${day} ${month} ${date} ${year} ${hours}:${minutes}:${seconds}`;\r\n \r\n   const handleQuizNameChange = (event) => {\r\n"
                },
                {
                    "date": 1684339846565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,10 @@\n import ResponsiveAppBar from \"../Navbar/NavbarUser\";\r\n import { useParams } from \"react-router-dom\";\r\n import { auth } from \"../../firebase/firebase\";\r\n import { v4 as uuidv4 } from \"uuid\";\r\n-QuizR\r\n+import QuizReviews from \"./QuizReviews\";\r\n+\r\n const FormContainer = styled(\"form\")({\r\n   display: \"flex\",\r\n   flexDirection: \"column\",\r\n   alignItems: \"center\",\r\n@@ -406,11 +407,9 @@\n             </FormContainer>\r\n           </Card>\r\n         )}\r\n         {reviewOpen && (\r\n-        <Card>\r\n-          {/* Stranica za review */}\r\n-        </Card>\r\n+        QuizReviews\r\n       )}\r\n         </Box>\r\n       </Box>\r\n     </div>\r\n"
                },
                {
                    "date": 1684339853168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -407,9 +407,9 @@\n             </FormContainer>\r\n           </Card>\r\n         )}\r\n         {reviewOpen && (\r\n-        QuizReviews\r\n+        <QuizReviews />\r\n       )}\r\n         </Box>\r\n       </Box>\r\n     </div>\r\n"
                },
                {
                    "date": 1684339984231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n   };\r\n \r\n   const handleReview = () => {\r\n     setReviewOpen(true);\r\n-    setEditOpen(false)\r\n+    \r\n   };\r\n   let createdAt = `${day} ${month} ${date} ${year} ${hours}:${minutes}:${seconds}`;\r\n \r\n   const handleQuizNameChange = (event) => {\r\n"
                },
                {
                    "date": 1684339991508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,13 +119,15 @@\n   const [editOpen, setEditOpen] = useState(true);\r\n   const [reviewOpen, setReviewOpen] = useState(false);\r\n \r\n   const handleEdit = () => {\r\n+    setReviewOpen(false)\r\n     setEditOpen(true);\r\n-    setReviewOpen(false)\r\n+ \r\n   };\r\n \r\n   const handleReview = () => {\r\n+    setEditOpen(false)\r\n     setReviewOpen(true);\r\n     \r\n   };\r\n   let createdAt = `${day} ${month} ${date} ${year} ${hours}:${minutes}:${seconds}`;\r\n"
                },
                {
                    "date": 1684341066383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,9 +244,9 @@\n     <div id=\"quiz-card-container\">\r\n       <Box sx={{ backgroundColor: \"rgb(238, 242, 246)\", minHeight: \"100vh\" }}>\r\n         <ResponsiveAppBar />\r\n         <ButtonContainer>\r\n-        <EditButton variant=\"contained\" onClick={handleEdit}>\r\n+        <EditButton v onClick={handleEdit}>\r\n           Edit\r\n         </EditButton>\r\n         <ReviewButton variant=\"contained\" onClick={handleReview}>\r\n           Review\r\n"
                },
                {
                    "date": 1684341077317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,9 +244,10 @@\n     <div id=\"quiz-card-container\">\r\n       <Box sx={{ backgroundColor: \"rgb(238, 242, 246)\", minHeight: \"100vh\" }}>\r\n         <ResponsiveAppBar />\r\n         <ButtonContainer>\r\n-        <EditButton v onClick={handleEdit}>\r\n+        <EditButton  variant=\"outlined\"\r\n+              color=\"primary\"  onClick={handleEdit}>\r\n           Edit\r\n         </EditButton>\r\n         <ReviewButton variant=\"contained\" onClick={handleReview}>\r\n           Review\r\n"
                },
                {
                    "date": 1684341083733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,16 @@\n import React, { useState, useEffect } from \"react\";\r\n import Box from \"@mui/material/Box\";\r\n-import { getFirestore, doc, getDoc, setDoc, collection, getDocs,updateDoc,deleteDoc } from \"firebase/firestore\";\r\n+import {\r\n+  getFirestore,\r\n+  doc,\r\n+  getDoc,\r\n+  setDoc,\r\n+  collection,\r\n+  getDocs,\r\n+  updateDoc,\r\n+  deleteDoc,\r\n+} from \"firebase/firestore\";\r\n import Card from \"@mui/material/Card\";\r\n import html2canvas from \"html2canvas/dist/html2canvas.min.js\";\r\n import { TextField, Button, Select, MenuItem, Typography } from \"@mui/material\";\r\n import { styled } from \"@mui/material/styles\";\r\n@@ -25,30 +34,30 @@\n   padding: \"20px\",\r\n });\r\n \r\n const ButtonContainer = styled(Box)({\r\n-    display: \"flex\",\r\n-    justifyContent: \"center\",\r\n-    marginTop: \"1rem\",\r\n-  });\r\n-  \r\n-  const EditButton = styled(Button)({\r\n-    backgroundColor: \"#f50057\",\r\n-    color: \"#fff\",\r\n-    marginRight: \"1rem\",\r\n-    \"&:hover\": {\r\n-      backgroundColor: \"#d5004f\",\r\n-    },\r\n-  });\r\n-  \r\n-  const ReviewButton = styled(Button)({\r\n-    backgroundColor: \"#2196f3\",\r\n-    color: \"#fff\",\r\n-    \"&:hover\": {\r\n-      backgroundColor: \"#1976d2\",\r\n-    },\r\n-  });\r\n+  display: \"flex\",\r\n+  justifyContent: \"center\",\r\n+  marginTop: \"1rem\",\r\n+});\r\n \r\n+const EditButton = styled(Button)({\r\n+  backgroundColor: \"#f50057\",\r\n+  color: \"#fff\",\r\n+  marginRight: \"1rem\",\r\n+  \"&:hover\": {\r\n+    backgroundColor: \"#d5004f\",\r\n+  },\r\n+});\r\n+\r\n+const ReviewButton = styled(Button)({\r\n+  backgroundColor: \"#2196f3\",\r\n+  color: \"#fff\",\r\n+  \"&:hover\": {\r\n+    backgroundColor: \"#1976d2\",\r\n+  },\r\n+});\r\n+\r\n const SectionTitle = styled(Typography)(({ theme }) => ({\r\n   marginTop: theme.spacing(2),\r\n   marginBottom: theme.spacing(2),\r\n   fontWeight: \"bold\",\r\n@@ -73,9 +82,9 @@\n   const { quizId } = useParams();\r\n   const [quizName, setQuizName] = useState(\"\");\r\n   const [quizDescription, setQuizDescription] = useState(\"\");\r\n   const [questions, setQuestions] = useState([]);\r\n- const [options,setOptions] = useState([])\r\n+  const [options, setOptions] = useState([]);\r\n   useEffect(() => {\r\n     const getQuizData = async () => {\r\n       const quizRef = doc(db, \"quizzes\", quizId);\r\n       const quizData = await getDoc(quizRef);\r\n@@ -119,17 +128,15 @@\n   const [editOpen, setEditOpen] = useState(true);\r\n   const [reviewOpen, setReviewOpen] = useState(false);\r\n \r\n   const handleEdit = () => {\r\n-    setReviewOpen(false)\r\n+    setReviewOpen(false);\r\n     setEditOpen(true);\r\n- \r\n   };\r\n \r\n   const handleReview = () => {\r\n-    setEditOpen(false)\r\n+    setEditOpen(false);\r\n     setReviewOpen(true);\r\n-    \r\n   };\r\n   let createdAt = `${day} ${month} ${date} ${year} ${hours}:${minutes}:${seconds}`;\r\n \r\n   const handleQuizNameChange = (event) => {\r\n@@ -139,9 +146,9 @@\n   const handleQuizDescriptionChange = (event) => {\r\n     setQuizDescription(event.target.value);\r\n   };\r\n   const handleAddQuestion = () => {\r\n-    setQuestions(prevQuestions => [\r\n+    setQuestions((prevQuestions) => [\r\n       ...prevQuestions,\r\n       {\r\n         id: uuidv4(), // Generirajte jedinstveni ID koristeći vremensku oznaku\r\n         question: \"\",\r\n@@ -150,10 +157,8 @@\n         options: [],\r\n       },\r\n     ]);\r\n   };\r\n-  \r\n-  \r\n \r\n   const handleSubmit = async (event) => {\r\n     event.preventDefault();\r\n \r\n@@ -164,256 +169,262 @@\n       const quizImage = canvas.toDataURL(\"image/png\");\r\n \r\n       // Stvorite novi objekt sa svim ažuriranim podacima\r\n       const updatedQuiz = {\r\n-        author_id: uid, \r\n+        author_id: uid,\r\n         name: quizName,\r\n         description: quizDescription,\r\n         quizImage: quizImage,\r\n         createdAt: createdAt,\r\n       };\r\n \r\n-       // Stvorite novi objekt newQuestions koji sadrži sve postojeće pitanja u kvizu\r\n-    const newQuestions = questions.map((question, index) => {\r\n+      // Stvorite novi objekt newQuestions koji sadrži sve postojeće pitanja u kvizu\r\n+      const newQuestions = questions.map((question, index) => {\r\n         return {\r\n           ...question,\r\n           id: index + 1,\r\n         };\r\n       });\r\n \r\n-     \r\n-\r\n-\r\n       // Stvorite podkolekciju \"questions\" za ažuriranje u bazi podataka\r\n       const questionsRef = collection(doc(db, \"quizzes\", quizId), \"questions\");\r\n \r\n       // Spremite svako pitanje u podkolekciju \"questions\"\r\n       for (const question of newQuestions) {\r\n         const questionRef = doc(questionsRef, question.id.toString());\r\n         await setDoc(questionRef, {\r\n-            id: uuidv4(),\r\n+          id: uuidv4(),\r\n           question: question.question,\r\n           answer: question.answer,\r\n           questionType: question.questionType,\r\n           options: question.options,\r\n         });\r\n       }\r\n \r\n       // Ažurirajte dokument s novim podacima o kvizu\r\n-    const quizRef = doc(db, \"quizzes\", quizId);\r\n-    await updateDoc(quizRef, updatedQuiz);\r\n-    alert(\"Editing Quiz..\");\r\n-    window.location.href = \"/workspace\";\r\n-  } catch (error) {\r\n-    console.error(error);\r\n-  }\r\n+      const quizRef = doc(db, \"quizzes\", quizId);\r\n+      await updateDoc(quizRef, updatedQuiz);\r\n+      alert(\"Editing Quiz..\");\r\n+      window.location.href = \"/workspace\";\r\n+    } catch (error) {\r\n+      console.error(error);\r\n+    }\r\n   };\r\n \r\n-\r\n   const handleRemoveQuestion = async (questionId) => {\r\n     if (window.confirm(\"Are you sure you want to remove this question?\")) {\r\n       const updatedQuestions = questions.filter(\r\n         (question) => question.id !== questionId\r\n       );\r\n-  \r\n+\r\n       // Update the IDs of the remaining questions\r\n-      const updatedQuestionsWithIDs = updatedQuestions.map((question, index) => ({\r\n-        ...question,\r\n-        id: uuidv4(),\r\n-      }));\r\n-  \r\n+      const updatedQuestionsWithIDs = updatedQuestions.map(\r\n+        (question, index) => ({\r\n+          ...question,\r\n+          id: uuidv4(),\r\n+        })\r\n+      );\r\n+\r\n       setQuestions(updatedQuestionsWithIDs);\r\n-  \r\n+\r\n       // Remove the question from the Firestore database\r\n-      const questionRef = doc(db, \"quizzes\", quizId, \"questions\", questionId.toString());\r\n+      const questionRef = doc(\r\n+        db,\r\n+        \"quizzes\",\r\n+        quizId,\r\n+        \"questions\",\r\n+        questionId.toString()\r\n+      );\r\n       await deleteDoc(questionRef);\r\n-  \r\n+\r\n       // Reorder the remaining questions in the database\r\n       const batch = [];\r\n       updatedQuestionsWithIDs.forEach((question, index) => {\r\n-        const updatedQuestionRef = doc(db, \"quizzes\", quizId, \"questions\", question.id.toString());\r\n+        const updatedQuestionRef = doc(\r\n+          db,\r\n+          \"quizzes\",\r\n+          quizId,\r\n+          \"questions\",\r\n+          question.id.toString()\r\n+        );\r\n         batch.push(updateDoc(updatedQuestionRef, { id: uuidv4() }));\r\n       });\r\n-  \r\n+\r\n       await Promise.all(batch);\r\n     }\r\n   };\r\n-  \r\n-  \r\n+\r\n   const createQuizButtonDisabled = questions.length === 0;\r\n   return (\r\n     <div id=\"quiz-card-container\">\r\n       <Box sx={{ backgroundColor: \"rgb(238, 242, 246)\", minHeight: \"100vh\" }}>\r\n         <ResponsiveAppBar />\r\n         <ButtonContainer>\r\n-        <EditButton  variant=\"outlined\"\r\n-              color=\"primary\"  onClick={handleEdit}>\r\n-          Edit\r\n-        </EditButton>\r\n-        <ReviewButton variant=\"contained\" onClick={handleReview}>\r\n-          Review\r\n-        </ReviewButton>\r\n-      </ButtonContainer>\r\n+          <Button variant=\"outlined\" color=\"primary\" onClick={handleEdit}>\r\n+            Edit\r\n+          </EditButton>\r\n+          <ReviewButton variant=\"contained\" onClick={handleReview}>\r\n+            Review\r\n+          </ReviewButton>\r\n+        </ButtonContainer>\r\n         <Box display=\"flex\" justifyContent=\"center\" marginTop=\"20px\">\r\n-        {editOpen && (\r\n-          <Card sx={{ minWidth: \"750px\" }}>\r\n-            <FormContainer onSubmit={handleSubmit}>\r\n-              <SectionTitle>\r\n-                <input\r\n-                  type=\"text\"\r\n-                  style={{ textAlign: \"center\" }}\r\n-                  placeholder=\"Enter Quiz Name!\"\r\n-                  value={quizName}\r\n-                  onChange={handleQuizNameChange}\r\n+          {editOpen && (\r\n+            <Card sx={{ minWidth: \"750px\" }}>\r\n+              <FormContainer onSubmit={handleSubmit}>\r\n+                <SectionTitle>\r\n+                  <input\r\n+                    type=\"text\"\r\n+                    style={{ textAlign: \"center\" }}\r\n+                    placeholder=\"Enter Quiz Name!\"\r\n+                    value={quizName}\r\n+                    onChange={handleQuizNameChange}\r\n+                    required\r\n+                  />\r\n+                </SectionTitle>\r\n+\r\n+                <TextField\r\n+                  label=\"Quiz Description\"\r\n+                  variant=\"outlined\"\r\n+                  margin=\"dense\"\r\n                   required\r\n+                  multiline\r\n+                  rows={3}\r\n+                  maxRows={10}\r\n+                  value={quizDescription}\r\n+                  onChange={handleQuizDescriptionChange}\r\n+                  defaultValue={questions.length > 0 ? questions[0].answer : \"\"}\r\n+                  style={{ width: \"65%\", maxWidth: \"750px\" }}\r\n                 />\r\n-              </SectionTitle>\r\n \r\n-              <TextField\r\n-                label=\"Quiz Description\"\r\n-                variant=\"outlined\"\r\n-                margin=\"dense\"\r\n-                required\r\n-                multiline\r\n-                rows={3}\r\n-                maxRows={10}\r\n-                value={quizDescription}\r\n-                onChange={handleQuizDescriptionChange}\r\n-                defaultValue={questions.length > 0 ? questions[0].answer : \"\"}\r\n-                style={{ width: \"65%\", maxWidth: \"750px\" }}\r\n-              />\r\n+                {questions.map((question, index) => (\r\n+                  <div key={index}>\r\n+                    <SectionTitle variant=\"h5\">Add a Question</SectionTitle>\r\n \r\n-              {questions.map((question, index) => (\r\n-                <div key={index}>\r\n-                  <SectionTitle variant=\"h5\">Add a Question</SectionTitle>\r\n-\r\n-                  <SelectLabel variant=\"subtitle1\">\r\n-                    Select Question Type\r\n-                  </SelectLabel>\r\n-                  <Select\r\n-                    value={question.questionType}\r\n-                    onChange={(event) => {\r\n-                      const newQuestions = [...questions];\r\n-                      newQuestions[index].questionType = event.target.value;\r\n-                      setQuestions(newQuestions);\r\n-                    }}\r\n-                    fullWidth\r\n-                    style={{\r\n-                      marginBottom: \"16px\",\r\n-                      width: \"450px\",\r\n-                      display: \"flex\",\r\n-                      justifyContent: \"center\",\r\n-                    }}\r\n-                  >\r\n-                    <MenuItem value=\"text\">Text</MenuItem>\r\n-                    <MenuItem value=\"multiple choice\">Radio Buttons</MenuItem>\r\n-                    <MenuItem value=\"checkbox\">Checkbox</MenuItem>\r\n-                    <MenuItem value=\"true/false\">True/False</MenuItem>\r\n-                    <MenuItem value=\"dropdown\">Dropdown</MenuItem>\r\n-                  </Select>\r\n-                  <TextField\r\n-                    label=\"Question\"\r\n-                    variant=\"outlined\"\r\n-                    margin=\"dense\"\r\n-                    required\r\n-                    value={question.question}\r\n-                    onChange={(e) => {\r\n-                      const newQuestions = [...questions];\r\n-                      newQuestions[index].question = e.target.value;\r\n-                      setQuestions(newQuestions);\r\n-                    }}\r\n-                    style={{\r\n-                      marginBottom: \"16px\",\r\n-                      width: \"100%\",\r\n-                      maxWidth: \"750px\",\r\n-                    }}\r\n-                  />\r\n-                  {question.questionType === \"text\" && (\r\n-                    <Text\r\n-                      question={question}\r\n-                      index={index}\r\n-                      questions={questions}\r\n-                      setQuestions={setQuestions}\r\n-                      questionType={question.questionType}\r\n+                    <SelectLabel variant=\"subtitle1\">\r\n+                      Select Question Type\r\n+                    </SelectLabel>\r\n+                    <Select\r\n+                      value={question.questionType}\r\n+                      onChange={(event) => {\r\n+                        const newQuestions = [...questions];\r\n+                        newQuestions[index].questionType = event.target.value;\r\n+                        setQuestions(newQuestions);\r\n+                      }}\r\n+                      fullWidth\r\n+                      style={{\r\n+                        marginBottom: \"16px\",\r\n+                        width: \"450px\",\r\n+                        display: \"flex\",\r\n+                        justifyContent: \"center\",\r\n+                      }}\r\n+                    >\r\n+                      <MenuItem value=\"text\">Text</MenuItem>\r\n+                      <MenuItem value=\"multiple choice\">Radio Buttons</MenuItem>\r\n+                      <MenuItem value=\"checkbox\">Checkbox</MenuItem>\r\n+                      <MenuItem value=\"true/false\">True/False</MenuItem>\r\n+                      <MenuItem value=\"dropdown\">Dropdown</MenuItem>\r\n+                    </Select>\r\n+                    <TextField\r\n+                      label=\"Question\"\r\n+                      variant=\"outlined\"\r\n+                      margin=\"dense\"\r\n+                      required\r\n+                      value={question.question}\r\n+                      onChange={(e) => {\r\n+                        const newQuestions = [...questions];\r\n+                        newQuestions[index].question = e.target.value;\r\n+                        setQuestions(newQuestions);\r\n+                      }}\r\n+                      style={{\r\n+                        marginBottom: \"16px\",\r\n+                        width: \"100%\",\r\n+                        maxWidth: \"750px\",\r\n+                      }}\r\n                     />\r\n-                  )}\r\n+                    {question.questionType === \"text\" && (\r\n+                      <Text\r\n+                        question={question}\r\n+                        index={index}\r\n+                        questions={questions}\r\n+                        setQuestions={setQuestions}\r\n+                        questionType={question.questionType}\r\n+                      />\r\n+                    )}\r\n \r\n-                  {question.questionType === \"multiple choice\" && (\r\n-                    <MultipleChoiceQuestion\r\n-                      question={question}\r\n-                      index={index}\r\n-                      questions={questions}\r\n-                      setQuestions={setQuestions}\r\n-                    />\r\n-                  )}\r\n+                    {question.questionType === \"multiple choice\" && (\r\n+                      <MultipleChoiceQuestion\r\n+                        question={question}\r\n+                        index={index}\r\n+                        questions={questions}\r\n+                        setQuestions={setQuestions}\r\n+                      />\r\n+                    )}\r\n \r\n-                  {question.questionType === \"checkbox\" && (\r\n-                    <CheckboxChoice\r\n-                      question={question}\r\n-                      index={index}\r\n-                      questions={questions}\r\n-                      setQuestions={setQuestions}\r\n-                      questionType={question.questionType}\r\n-                    />\r\n-                  )}\r\n+                    {question.questionType === \"checkbox\" && (\r\n+                      <CheckboxChoice\r\n+                        question={question}\r\n+                        index={index}\r\n+                        questions={questions}\r\n+                        setQuestions={setQuestions}\r\n+                        questionType={question.questionType}\r\n+                      />\r\n+                    )}\r\n \r\n-                  {question.questionType === \"true/false\" && (\r\n-                    <TrueFalseChoice\r\n-                      question={question}\r\n-                      index={index}\r\n-                      questions={questions}\r\n-                      setQuestions={setQuestions}\r\n-                      questionType={question.questionType}\r\n-                    />\r\n-                  )}\r\n+                    {question.questionType === \"true/false\" && (\r\n+                      <TrueFalseChoice\r\n+                        question={question}\r\n+                        index={index}\r\n+                        questions={questions}\r\n+                        setQuestions={setQuestions}\r\n+                        questionType={question.questionType}\r\n+                      />\r\n+                    )}\r\n \r\n-                  {question.questionType === \"dropdown\" && (\r\n-                    <Dropdown\r\n-                      question={question}\r\n-                      index={index}\r\n-                      questions={questions}\r\n-                      setQuestions={setQuestions}\r\n-                      questionType={question.questionType}\r\n-                    />\r\n-                  )}\r\n+                    {question.questionType === \"dropdown\" && (\r\n+                      <Dropdown\r\n+                        question={question}\r\n+                        index={index}\r\n+                        questions={questions}\r\n+                        setQuestions={setQuestions}\r\n+                        questionType={question.questionType}\r\n+                      />\r\n+                    )}\r\n \r\n-                  <Box display=\"flex\" justifyContent=\"center\">\r\n-                    <Button\r\n-                      variant=\"contained\"\r\n-                      color=\"secondary\"\r\n-                      style={{\r\n-                        margin: \"0 auto\",\r\n-                        marginBottom: \"16px\",\r\n-                        marginTop: \"16px\",\r\n-                      }}\r\n-                      onClick={() => handleRemoveQuestion(question.id)}\r\n-                    >\r\n-                      Remove Question\r\n-                    </Button>\r\n-                  </Box>\r\n-                  <hr style={{ width: \"100%\", marginBottom: \"16px\" }} />\r\n-                </div>\r\n-              ))}\r\n+                    <Box display=\"flex\" justifyContent=\"center\">\r\n+                      <Button\r\n+                        variant=\"contained\"\r\n+                        color=\"secondary\"\r\n+                        style={{\r\n+                          margin: \"0 auto\",\r\n+                          marginBottom: \"16px\",\r\n+                          marginTop: \"16px\",\r\n+                        }}\r\n+                        onClick={() => handleRemoveQuestion(question.id)}\r\n+                      >\r\n+                        Remove Question\r\n+                      </Button>\r\n+                    </Box>\r\n+                    <hr style={{ width: \"100%\", marginBottom: \"16px\" }} />\r\n+                  </div>\r\n+                ))}\r\n \r\n-              <Button variant=\"contained\" onClick={handleAddQuestion}>\r\n-                Add Question\r\n-              </Button>\r\n-              {questions.length > 0 && (\r\n-                <Button\r\n-                  className=\"edit\"\r\n-                  type=\"submit\"\r\n-                  variant=\"contained\"\r\n-                  style={{ marginTop: \"16px\", backgroundColor: \"#112240\" }}\r\n-                >\r\n-                  Edit Quiz\r\n+                <Button variant=\"contained\" onClick={handleAddQuestion}>\r\n+                  Add Question\r\n                 </Button>\r\n-              )}\r\n-            </FormContainer>\r\n-          </Card>\r\n-        )}\r\n-        {reviewOpen && (\r\n-        <QuizReviews />\r\n-      )}\r\n+                {questions.length > 0 && (\r\n+                  <Button\r\n+                    className=\"edit\"\r\n+                    type=\"submit\"\r\n+                    variant=\"contained\"\r\n+                    style={{ marginTop: \"16px\", backgroundColor: \"#112240\" }}\r\n+                  >\r\n+                    Edit Quiz\r\n+                  </Button>\r\n+                )}\r\n+              </FormContainer>\r\n+            </Card>\r\n+          )}\r\n+          {reviewOpen && <QuizReviews />}\r\n         </Box>\r\n       </Box>\r\n     </div>\r\n   );\r\n"
                },
                {
                    "date": 1684341113229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -260,10 +260,10 @@\n         <ResponsiveAppBar />\r\n         <ButtonContainer>\r\n           <Button variant=\"outlined\" color=\"primary\" onClick={handleEdit}>\r\n             Edit\r\n-          </EditButton>\r\n-          <ReviewButton variant=\"contained\" onClick={handleReview}>\r\n+          </Button>\r\n+          <Button variant=\"contained\" onClick={handleReview}>\r\n             Review\r\n           </ReviewButton>\r\n         </ButtonContainer>\r\n         <Box display=\"flex\" justifyContent=\"center\" marginTop=\"20px\">\r\n"
                },
                {
                    "date": 1684341121079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -261,11 +261,11 @@\n         <ButtonContainer>\r\n           <Button variant=\"outlined\" color=\"primary\" onClick={handleEdit}>\r\n             Edit\r\n           </Button>\r\n-          <Button variant=\"contained\" onClick={handleReview}>\r\n+          <Button variant=\"contained\" color=\"error\" onClick={handleReview}>\r\n             Review\r\n-          </ReviewButton>\r\n+          </Button>\r\n         </ButtonContainer>\r\n         <Box display=\"flex\" justifyContent=\"center\" marginTop=\"20px\">\r\n           {editOpen && (\r\n             <Card sx={{ minWidth: \"750px\" }}>\r\n"
                },
                {
                    "date": 1684341131105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -261,9 +261,9 @@\n         <ButtonContainer>\r\n           <Button variant=\"outlined\" color=\"primary\" onClick={handleEdit}>\r\n             Edit\r\n           </Button>\r\n-          <Button variant=\"contained\" color=\"error\" onClick={handleReview}>\r\n+          <Button variant=\"outlined\" color=\"error\" onClick={handleReview}>\r\n             Review\r\n           </Button>\r\n         </ButtonContainer>\r\n         <Box display=\"flex\" justifyContent=\"center\" marginTop=\"20px\">\r\n"
                }
            ],
            "date": 1684293003065,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from \"react\";\r\n\r\nimport Box from \"@mui/material/Box\";\r\nimport {\r\n  getFirestore,\r\n  collection,\r\n  addDoc,\r\n  doc,\r\n  getDoc,\r\n  setDoc,\r\n  getDocs,\r\n  orderBy,\r\n  query,\r\n  updateDoc,\r\n} from \"firebase/firestore\";\r\nimport Card from \"@mui/material/Card\";\r\nimport html2canvas from \"html2canvas/dist/html2canvas.min.js\";\r\n\r\nimport { TextField, Button, Select, MenuItem, Typography } from \"@mui/material\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport Text from \"./QuestionType/Text\";\r\nimport CheckboxChoice from \"./QuestionType/CheckboxChoice\";\r\nimport MultipleChoiceQuestion from \"./QuestionType/MultipleChoiceQuestion\";\r\nimport TrueFalseChoice from \"./QuestionType/TrueFalseChoice\";\r\nimport Dropdown from \"./QuestionType/Dropdown\";\r\nimport ResponsiveAppBar from \"../Navbar/NavbarUser\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst FormContainer = styled(\"form\")({\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  alignItems: \"center\",\r\n  marginTop: \"3rem\",\r\n  maxWidth: 750,\r\n  padding: \"20px\",\r\n});\r\nconst SectionTitle = styled(Typography)(({ theme }) => ({\r\n  marginTop: theme.spacing(2),\r\n  marginBottom: theme.spacing(2),\r\n  fontWeight: \"bold\",\r\n  \"& input\": {\r\n    fontWeight: \"bold\",\r\n    fontSize: \"1.5rem\",\r\n    lineHeight: \"2rem\",\r\n    border: \"none\",\r\n    borderBottom: `2px solid ${theme.palette.primary.main}`,\r\n    outline: \"none\",\r\n  },\r\n}));\r\n\r\nconst SelectLabel = styled(Typography)({\r\n  marginBottom: 8,\r\n  fontWeight: \"bold\",\r\n});\r\n\r\nexport const db = getFirestore();\r\n\r\nconst EditQuiz = () => {\r\n  const { quizId } = useParams();\r\n  const [quizName, setQuizName] = useState(\"\");\r\n  const [quizDescription, setQuizDescription] = useState(\"\");\r\n  const [quizImage, setQuizImage] = useState(null);\r\n  const [options, setOptions] = useState([]);\r\n  const [newOption, setNewOption] = useState(\"\");\r\n  const [questionType, setQuestionType] = useState([]);\r\n  const [questions, setQuestions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Dohvati podatke o kvizu iz Firebase baze podataka na temelju njegovog ID-a\r\n    const getQuizData = async () => {\r\n      const quizRef = doc(db, \"quizzes\", quizId);\r\n      const quizData = await getDoc(quizRef);\r\n\r\n      if (quizData.exists()) {\r\n        // Postavi naziv i opis kviza\r\n        setQuizName(quizData.data().name);\r\n        setQuizDescription(quizData.data().description);\r\n\r\n        // Dohvati pitanja za ovaj kviz i postavi ih u stanje\r\n        const questionsRef = collection(quizRef, \"questions\");\r\n        const questionsSnapshot = await getDocs(query(questionsRef, orderBy(\"id\")));\r\n\r\n        const newQuestions = questionsSnapshot.docs.map((doc) => {\r\n          const questionData = doc.data();\r\n          return {\r\n            id: doc.id,\r\n            question: questionData.question,\r\n            answer: questionData.answer,\r\n            questionType: questionData.questionType,\r\n            options: questionData.options || [],\r\n      \r\n          };\r\n        });\r\n\r\n        setQuestions(newQuestions);\r\n      }\r\n    };\r\n\r\n    getQuizData();\r\n  }, [quizId]);\r\n\r\n  let currentDate = new Date();\r\n  let day = currentDate.toLocaleString(\"default\", { weekday: \"short\" });\r\n  let month = currentDate.toLocaleString(\"default\", { month: \"short\" });\r\n  let date = currentDate.getDate();\r\n  let year = currentDate.getFullYear();\r\n  let hours = currentDate.getHours();\r\n  let minutes = currentDate.getMinutes();\r\n  let seconds = currentDate.getSeconds();\r\n\r\n  let createdAt = `${day} ${month} ${date} ${year} ${hours}:${minutes}:${seconds}`;\r\n\r\n  const handleQuizNameChange = (event) => {\r\n    setQuizName(event.target.value);\r\n  };\r\n\r\n  const handleQuizDescriptionChange = (event) => {\r\n    setQuizDescription(event.target.value);\r\n  };\r\n\r\n  const handleAddQuestion = () => {\r\n    setQuestions([\r\n      ...questions,\r\n      {\r\n        id: questions.length + 1,\r\n        question: \"\",\r\n        answer: \"\",\r\n        questionType: \"text\",\r\n        options: [],\r\n      },\r\n    ]);\r\n    setQuestionType([\r\n      ...questionType,\r\n      { questionId: questions.length + 1, type: \"text\" },\r\n    ]);\r\n  };\r\n\r\n  const handleRemoveQuestion = (questionId) => {\r\n    const updatedQuestions = questions.filter((question) => question.id == questionId);\r\n    setQuestions(updatedQuestions);\r\n    \r\n  }\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      const canvas = await html2canvas(\r\n        document.querySelector(\"#quiz-card-container\")\r\n      );\r\n      const quizImage = canvas.toDataURL(\"image/png\");\r\n\r\n      // Stvorite novi objekt sa svim ažuriranim podacima\r\n      const updatedQuiz = {\r\n        name: quizName,\r\n        description: quizDescription,\r\n        quizImage: quizImage,\r\n        createdAt: createdAt,\r\n        questions: [],\r\n      };\r\n\r\n      // Stvorite novi objekt newQuestions koji sadrži sve postojeće pitanja u kvizu\r\n      const newQuestions = questions.map((question) => {\r\n        return {\r\n          id: question.id,\r\n          question: question.question,\r\n          answer: question.answer,\r\n          questionType: question.questionType,\r\n          options: question.options,\r\n        };\r\n      });\r\n\r\n      // Dodajte nova pitanja u novi objekt newQuestions\r\n      for (let i = 0; i < options.length; i++) {\r\n        if (options[i] !== \"\") {\r\n          newQuestions.push({\r\n            id: newQuestions.length + 1,\r\n            question: \"\",\r\n            answer: \"\",\r\n            questionType: options[i],\r\n            options: [],\r\n          });\r\n        }\r\n      }\r\n\r\n      // Ažurirajte novo stanje objekta sa novim pitanjima\r\n      setQuestions(newQuestions);\r\n\r\n      // Stvorite podkolekciju \"questions\" za ažuriranje u bazi podataka\r\n      const questionsRef = collection(doc(db, \"quizzes\", quizId), \"questions\");\r\n\r\n      // Spremite svako pitanje u podkolekciju \"questions\"\r\n      for (const question of newQuestions) {\r\n        const questionRef = doc(questionsRef, question.id.toString());\r\n        await setDoc(questionRef, {\r\n          question: question.question,\r\n          answer: question.answer,\r\n          questionType: question.questionType,\r\n          options: question.options,\r\n        });\r\n      }\r\n\r\n      // Ažurirajte dokument s novim podacima o kvizu\r\n      const quizRef = doc(db, \"quizzes\", quizId);\r\n      await setDoc(quizRef, updatedQuiz);\r\n      alert(\"Editing Quiz..\");\r\n      window.location.href = \"/workspace\";\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n  const createQuizButtonDisabled = questions.length === 0;\r\n  return (\r\n    <div id=\"quiz-card-container\">\r\n      <Box sx={{ backgroundColor: \"rgb(238, 242, 246)\", minHeight: \"100vh\" }}>\r\n        <ResponsiveAppBar />\r\n        <Box display=\"flex\" justifyContent=\"center\" marginTop=\"20px\">\r\n          <Card sx={{ minWidth: \"750px\" }}>\r\n            <FormContainer onSubmit={handleSubmit}>\r\n              <SectionTitle>\r\n                <input\r\n                  type=\"text\"\r\n                  style={{ textAlign: \"center\" }}\r\n                  placeholder=\"Enter Quiz Name!\"\r\n                  value={quizName}\r\n                  onChange={handleQuizNameChange}\r\n                  required\r\n                />\r\n              </SectionTitle>\r\n\r\n              <TextField\r\n                label=\"Quiz Description\"\r\n                variant=\"outlined\"\r\n                margin=\"dense\"\r\n                required\r\n                multiline\r\n                rows={3}\r\n                maxRows={10}\r\n                value={quizDescription}\r\n                onChange={handleQuizDescriptionChange}\r\n                defaultValue={questions.length > 0 ? questions[0].answer : \"\"}\r\n                style={{ width: \"65%\", maxWidth: \"750px\" }}\r\n              />\r\n\r\n              {questions.map((question, index) => (\r\n                <div key={index}>\r\n                  <SectionTitle variant=\"h5\">Add a Question</SectionTitle>\r\n\r\n                  <SelectLabel variant=\"subtitle1\">\r\n                    Select Question Type\r\n                  </SelectLabel>\r\n                  <Select\r\n                    value={question.questionType}\r\n                    onChange={(event) => {\r\n                      const newQuestions = [...questions];\r\n                      newQuestions[index].questionType = event.target.value;\r\n                      setQuestions(newQuestions);\r\n                    }}\r\n                    fullWidth\r\n                    style={{\r\n                      marginBottom: \"16px\",\r\n                      width: \"450px\",\r\n                      display: \"flex\",\r\n                      justifyContent: \"center\",\r\n                    }}\r\n                  >\r\n                    <MenuItem value=\"text\">Text</MenuItem>\r\n                    <MenuItem value=\"multiple choice\">Radio Buttons</MenuItem>\r\n                    <MenuItem value=\"checkbox\">Checkbox</MenuItem>\r\n                    <MenuItem value=\"true/false\">True/False</MenuItem>\r\n                    <MenuItem value=\"dropdown\">Dropdown</MenuItem>\r\n                  </Select>\r\n                  <TextField\r\n                    label=\"Question\"\r\n                    variant=\"outlined\"\r\n                    margin=\"dense\"\r\n                    required\r\n                    value={question.question}\r\n                    onChange={(e) => {\r\n                      const newQuestions = [...questions];\r\n                      newQuestions[index].question = e.target.value;\r\n                      setQuestions(newQuestions);\r\n                    }}\r\n                    style={{\r\n                      marginBottom: \"16px\",\r\n                      width: \"100%\",\r\n                      maxWidth: \"750px\",\r\n                    }}\r\n                  />\r\n                  {question.questionType === \"text\" && (\r\n                    <Text\r\n                      question={question}\r\n                      index={index}\r\n                      questions={questions}\r\n                      setQuestions={setQuestions}\r\n                      questionType={question.questionType}\r\n                    />\r\n                  )}\r\n\r\n                  {question.questionType === \"multiple choice\" && (\r\n                    <MultipleChoiceQuestion\r\n                      question={question}\r\n                      index={index}\r\n                      questions={questions}\r\n                      setQuestions={setQuestions}\r\n                    />\r\n                  )}\r\n\r\n                  {question.questionType === \"checkbox\" && (\r\n                    <CheckboxChoice\r\n                      question={question}\r\n                      index={index}\r\n                      questions={questions}\r\n                      setQuestions={setQuestions}\r\n                      questionType={question.questionType}\r\n                    />\r\n                  )}\r\n\r\n                  {question.questionType === \"true/false\" && (\r\n                    <TrueFalseChoice\r\n                      question={question}\r\n                      index={index}\r\n                      questions={questions}\r\n                      setQuestions={setQuestions}\r\n                      questionType={question.questionType}\r\n                    />\r\n                  )}\r\n\r\n                  {question.questionType === \"dropdown\" && (\r\n                    <Dropdown\r\n                      question={question}\r\n                      index={index}\r\n                      questions={questions}\r\n                      setQuestions={setQuestions}\r\n                      questionType={question.questionType}\r\n                    />\r\n                  )}\r\n\r\n                  <Box display=\"flex\" justifyContent=\"center\">\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"secondary\"\r\n                      onClick={() => handleRemoveQuestion(question.id)}\r\n                      style={{\r\n                        margin: \"0 auto\",\r\n                        marginBottom: \"16px\",\r\n                        marginTop: \"16px\",\r\n                      }}\r\n                    >\r\n                      Remove Questiona\r\n                    </Button>\r\n                  </Box>\r\n                  <hr style={{ width: \"100%\", marginBottom: \"16px\" }} />\r\n                </div>\r\n              ))}\r\n\r\n              <Button variant=\"contained\" onClick={handleAddQuestion}>\r\n                Add Question\r\n              </Button>\r\n              {questions.length > 0 && (\r\n                <Button\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  style={{ marginTop: \"16px\", backgroundColor: \"#112240\" }}\r\n                >\r\n                  Edit Quiz\r\n                </Button>\r\n              )}\r\n            </FormContainer>\r\n          </Card>\r\n        </Box>\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditQuiz;\r\n"
        }
    ]
}